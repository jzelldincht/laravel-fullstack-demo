<?php

namespace Modules\Common\Exceptions;

use Illuminate\Foundation\Exceptions\Handler as ExceptionHandler;
use Illuminate\Validation\ValidationException;
use Modules\Api\Exceptions\ApiException;
use Modules\Common\Variables\HttpStatus;
use Modules\Common\Variables\ResponseStatus;
use Throwable;

class Handler extends ExceptionHandler
{
    /**
     * A list of the exception types that are not reported.
     *
     * @var array<int, class-string<Throwable>>
     */
    protected $dontReport = [
        //
    ];

    /**
     * A list of the inputs that are never flashed for validation exceptions.
     *
     * @var array<int, string>
     */
    protected $dontFlash = [
        'current_password',
        'password',
        'password_confirmation',
    ];

    /**
     * Register the exception handling callbacks for the application.
     *
     * @return void
     */
    public function register()
    {
        $this->reportable(function (Throwable $e) {
            //
        });
    }

    public function render($request, Throwable $e)
    {
        // 判断是否是 api/xx/xx  的路由
        if($request->is('api/*')) {

            // 自定义的Api异常，接管Api模块的所有异常，如数据库等
            if($e instanceof ApiException) {
                $message = $e->getMessage();
                $status = $e->getCode();

                return response()->json([
                    'status' => $status,
                    'message' => $message,
                ], HttpStatus::BAD_REQUEST);
            }

            // 用户输入验证异常
            if($e instanceof ValidationException)
            {
                $message = $e->validator->errors()->first();

                return response()->json([
                    'status' => ResponseStatus::BAD_REQUEST,
                    'message' => $message,
                ], HttpStatus::BAD_REQUEST);
            }
        }


        return parent::render($request, $e); // TODO: Change the autogenerated stub
    }
}
